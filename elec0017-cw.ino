#include "arduino_secrets.h"
/*
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/65fdc915-34dc-4256-8247-d07dcdd943f4

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float loudness;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <math.h>

const int soundPin = A0;

const int ledGreenPin = 25;
const int ledRedPin = 26;
const int ledBluePin = 27;

const int baudRate = 115200;
typedef struct colorRgb {
  unsigned char x, y, z;  
} tColorRgb;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(baudRate);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  if (isnan(threshold)) {
    Serial.println("threshold undefined, Setting to default value ");
    threshold = 0.0f;
  }

  // define pins  
  WiFiDrv::pinMode(ledGreenPin, OUTPUT); //define GREEN LED
  WiFiDrv::pinMode(ledRedPin, OUTPUT); //define RED LED
  WiFiDrv::pinMode(ledBluePin, OUTPUT); //define BLUE LED
}

const int passes = 1;


float getCurrentLoudness() {
  float sensorValue = 0;
  for (int i = 0; i < passes; i++) {
    sensorValue += analogRead(soundPin);
    delay(1);
  }
  // [0,1]
  return sensorValue / (1023.0f * (float)passes);
}
float getNormalizedLoudness() {
  // scaled such that at threshold the value is 1
  
  if (threshold == 0.0f) {
    threshold = 0.001f;
  }

  // [0,inf]
  return getCurrentLoudness()/threshold;
}

void setColorToLoudness(tColorRgb &ledColor, float normalizedLoudness) {
  // lerp x,y,z bettween 255,0,0 to 0,255,0 for tColorRgb as normalizedLoudness goes from 1 to 0 
  ledColor.x = (unsigned char)(255 * normalizedLoudness);
  ledColor.y = (unsigned char)(255 * (1 - normalizedLoudness));
  ledColor.z = 0;
}

void loop() {
  ArduinoCloud.update();

  float normalizedLoudness = getNormalizedLoudness();
  loudness = std::min(1.f, normalizedLoudness);

  tColorRgb ledColor = {0, 0, 0};
  setColorToLoudness(ledColor, loudness);

  // Serial.println("Red ");
  // Serial.println(ledColor.x);
  // Serial.println("Gre ");
  // Serial.println(ledColor.y);
  // Serial.println("Blu ");
  // Serial.println(ledColor.z);

  WiFiDrv::analogWrite(ledRedPin,ledColor.x); // Red
  WiFiDrv::analogWrite(ledGreenPin,ledColor.y);  // Green //Note that analogWrite takes int while i am passing in a unsigned int is this an issue ?
  WiFiDrv::analogWrite(ledBluePin,ledColor.z);   // Blue


  if (normalizedLoudness > threshold) {
    Serial.println(normalizedLoudness);
    isVoliation = true; 
  } else {
    isVoliation = false;
  }
}

void onThresholdChange() {
  Serial.println("New threshold set ");
  Serial.println(threshold);
}
